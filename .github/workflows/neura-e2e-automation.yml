name: Neura E2E Automation

on:
  schedule:
    - cron: '0 * * * *'
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:
    inputs:
      spec_file:
        description: 'Path to one spec file (e.g. tests/bridge-ui.spec.js)'
        required: false
        default: ''
      test_pattern:
        description: 'Playwright --grep pattern (test title regex)'
        required: false
        default: ''

jobs:
  e2e:
    name: Neura E2E Automation tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: e2e-${{ github.ref }}-${{ github.event_name == 'schedule' && 'cron' || 'ci' }}
      cancel-in-progress: true

    env:
      SEED_PHRASE:                  ${{ secrets.SEED_PHRASE }}
      PRIVATE_KEY:                  ${{ secrets.PRIVATE_KEY }}
      WALLET_PASSWORD:              ${{ secrets.WALLET_PASSWORD }}
      MY_ADDRESS:                   ${{ secrets.MY_ADDRESS }}
      SEPOLIA_RPC_URL:              ${{ vars.SEPOLIA_RPC_URL }}
      NEURA_TESTNET_RPC_URL:        ${{ vars.NEURA_TESTNET_RPC_URL }}
      SEPOLIA_BRIDGE_PROXY_ADDRESS: ${{ vars.SEPOLIA_BRIDGE_PROXY_ADDRESS }}
      NEURA_BRIDGE_PROXY_ADDRESS:   ${{ vars.NEURA_BRIDGE_PROXY_ADDRESS }}
      ANKR_TOKEN_ADDRESS:           ${{ vars.ANKR_TOKEN_ADDRESS }}
      NEURA_TESTNET_URL:            ${{ vars.NEURA_TESTNET_URL }}
      SUBGRAPH_URL:                 ${{ vars.SUBGRAPH_URL }}
      HEADLESS:                     ${{ vars.HEADLESS }}
      BROWSER_CHANNEL:              ${{ vars.BROWSER_CHANNEL }}
      TEST_TIMEOUT:                 ${{ vars.TEST_TIMEOUT }}
      DEFAULT_TIMEOUT:              ${{ vars.DEFAULT_TIMEOUT }}
      LONG_TIMEOUT:                 ${{ vars.LONG_TIMEOUT }}
      METAMASK_POPUP_TIMEOUT:       ${{ vars.METAMASK_POPUP_TIMEOUT }}
      WALLET_OPERATION_TIMEOUT:     ${{ vars.WALLET_OPERATION_TIMEOUT }}
      AMOUNT_FILL_TIMEOUT:          ${{ vars.AMOUNT_FILL_TIMEOUT }}
      TRANSACTION_APPROVAL_TIMEOUT: ${{ vars.TRANSACTION_APPROVAL_TIMEOUT }}
      NETWORK_OPERATION_TIMEOUT:    ${{ vars.NETWORK_OPERATION_TIMEOUT }}
      BRIDGE_OPERATION_TIMEOUT:     ${{ vars.BRIDGE_OPERATION_TIMEOUT }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install dependencies (Chromium only)
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Run scheduled tests (schedule, push to main, PR to main)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --grep "@scheduledRun" --retries=1

      - name: Run single spec file (manual dispatch + spec_file)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.spec_file != '' }}
        run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' test --headed ${{ github.event.inputs.spec_file }}

      - name: Run grep pattern only (manual dispatch + test_pattern)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.spec_file == '' && github.event.inputs.test_pattern != '' }}
        run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --headed --grep "${{ github.event.inputs.test_pattern }}"

      - name: Run full suite (manual dispatch default)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.spec_file == '' && github.event.inputs.test_pattern == '' }}
        run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npx playwright test --headed

      - name: Upload Playwright report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 14

      - name: Upload traces on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/trace.zip
          retention-days: 14

  check-cancellation:
    needs: e2e
    runs-on: ubuntu-latest
    if: ${{ needs.e2e.result == 'cancelled' }}
    outputs:
      cancelled_by_user: ${{ steps.check.outputs.cancelled_by_user }}
    steps:
      - name: Check if run was manually cancelled
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUN_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}")
          CANCELER=$(echo "$RUN_INFO" | jq -r '.canceler.login // empty')
          if [ -n "$CANCELER" ]; then
            echo "cancelled_by_user=true" >> $GITHUB_OUTPUT
          else
            echo "cancelled_by_user=false" >> $GITHUB_OUTPUT
          fi

  slack-notify:
    needs: [e2e, check-cancellation]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (
        needs.e2e.result != 'cancelled' ||
        (needs.e2e.result == 'cancelled' && needs.check-cancellation.outputs.cancelled_by_user == 'false')
      )
    steps:
      - name: Post Slack notification (Blocks)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.e2e.result }}" = "success" ]; then
            STATUS_EMOJI=":white_check_mark:"
            STATUS_TEXT="*SUCCESS*"
          elif [ "${{ needs.e2e.result }}" = "failure" ]; then
            STATUS_EMOJI=":x:"
            STATUS_TEXT="*FAILURE*"
          else
            STATUS_EMOJI=":warning:"
            STATUS_TEXT="*CANCELLED*"
          fi

          cat <<EOF > slack-message.json
  {
    "blocks": [
      {
        "type": "header",
        "text": {
          "type": "plain_text",
          "text": "Neura E2E Automation: $STATUS_TEXT $STATUS_EMOJI",
          "emoji": true
        }
      },
      {
        "type": "section",
        "fields": [
          {
            "type": "mrkdwn",
            "text": "*Repo:*\n<${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}|${GITHUB_REPOSITORY}>"
          },
          {
            "type": "mrkdwn",
            "text": "*Workflow:*\n<${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}|Run #${GITHUB_RUN_NUMBER}>"
          }
        ]
      },
      {
        "type": "section",
        "fields": [
          {
            "type": "mrkdwn",
            "text": "*Branch:*\n${GITHUB_REF##*/}"
          },
          {
            "type": "mrkdwn",
            "text": "*Triggered by:*\n${GITHUB_ACTOR}"
          }
        ]
      },
      {
        "type": "divider"
      },
      {
        "type": "context",
        "elements": [
          {
            "type": "mrkdwn",
            "text": "Workflow: *Neura E2E Automation*"
          }
        ]
      }
    ]
  }
  EOF

curl -X POST -H 'Content-type: application/json' --data @slack-message.json $SLACK_WEBHOOK_URL
